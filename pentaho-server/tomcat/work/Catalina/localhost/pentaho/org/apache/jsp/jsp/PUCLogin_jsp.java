/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2025-06-16 18:16:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.pentaho.platform.web.http.security.PreventBruteForceException;
import org.pentaho.platform.engine.core.system.PentahoSystem;
import org.pentaho.platform.util.messages.LocaleHelper;
import org.pentaho.platform.api.engine.IPentahoSession;
import org.pentaho.platform.api.engine.IPluginManager;
import org.pentaho.platform.web.jsp.messages.Messages;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.http.HttpSession;
import org.pentaho.platform.engine.core.system.PentahoSessionHolder;
import org.owasp.encoder.Encode;

public final class PUCLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


  // List of request URL strings to look for to send 401

  private List<String> send401RequestList;

  public final String SPRING_SECURITY_SAVED_REQUEST_KEY = "SPRING_SECURITY_SAVED_REQUEST";
  public final String SPRING_SECURITY_LAST_EXCEPTION_KEY = "SPRING_SECURITY_LAST_EXCEPTION";

  public void jspInit() {
    // super.jspInit();
    send401RequestList = new ArrayList<String>();
    String unauthList = getServletConfig().getInitParameter("send401List"); //$NON-NLS-1$
    if (unauthList == null) {
      send401RequestList.add("AdhocWebService"); //$NON-NLS-1$
    } else {
      StringTokenizer st = new StringTokenizer(unauthList, ","); //$NON-NLS-1$
      String requestStr;
      while (st.hasMoreElements()) {
        requestStr = st.nextToken();
        send401RequestList.add(requestStr.trim());
      }
    }
  }


  public boolean isUserBlocked(HttpSession session) {
    Object springLastException = session.getAttribute(SPRING_SECURITY_LAST_EXCEPTION_KEY);
    return springLastException != null && springLastException instanceof PreventBruteForceException;
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tld/c.tld", Long.valueOf(1667930812000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.springframework.security.web.savedrequest.SavedRequest");
    _jspx_imports_classes.add("org.pentaho.platform.util.messages.LocaleHelper");
    _jspx_imports_classes.add("org.pentaho.platform.web.http.security.PreventBruteForceException");
    _jspx_imports_classes.add("org.pentaho.platform.web.jsp.messages.Messages");
    _jspx_imports_classes.add("org.pentaho.platform.engine.core.system.PentahoSystem");
    _jspx_imports_classes.add("org.pentaho.platform.engine.core.system.PentahoSessionHolder");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.StringTokenizer");
    _jspx_imports_classes.add("org.pentaho.platform.api.engine.IPluginManager");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.pentaho.platform.api.engine.IPentahoSession");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

  response.setCharacterEncoding(LocaleHelper.getSystemEncoding());
  String path = request.getContextPath();

  IPentahoSession userSession = PentahoSessionHolder.getSession();
  // SPRING_SECURITY_SAVED_REQUEST_KEY contains the URL the user originally wanted before being redirected to the login page
  // if the requested url is in the list of URLs specified in the web.xml's init-param send401List,
  // then return a 401 status now and don't show a login page (401 means not authenticated)
  Object reqObj = request.getSession().getAttribute(SPRING_SECURITY_SAVED_REQUEST_KEY);
  String requestedURL = "";
  if (reqObj != null) {
    requestedURL = ((SavedRequest) reqObj).getRedirectUrl();

    String lookFor;
    for (int i=0; i<send401RequestList.size(); i++) {
      lookFor = send401RequestList.get(i);
      if ( requestedURL.indexOf(lookFor) >=0 ) {
        response.sendError(401);
        return;
      }
    }
  }

  boolean loggedIn = request.getRemoteUser() != null && request.getRemoteUser() != "";
  int year = (new java.util.Date()).getYear() + 1900;

  boolean showUsers = Boolean.parseBoolean(PentahoSystem.getSystemSetting("login-show-sample-users-hint", "true"));

      out.write('\n');
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"bootstrap\">\n");
      out.write("<head>\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("  <title>");
      out.print(Messages.getInstance().getString("UI.PUC.TITLE"));
      out.write("</title>\n");
      out.write("\n");
      out.write("  ");

    String ua = request.getHeader( "User-Agent" );
    if ( ua != null ) {
      ua = ua.toLowerCase();
    } else {
      ua = "none";
    }
    if ( !"desktop".equalsIgnoreCase( request.getParameter( "mode") ) ) {
      if ( ua.contains( "ipad" )   || ua.contains( "ipod" )    ||
           ua.contains( "iphone" ) || ua.contains( "android" ) ||
           "mobile".equalsIgnoreCase( request.getParameter( "mode" ) ) ) {

        IPluginManager pluginManager = PentahoSystem.get( IPluginManager.class, PentahoSessionHolder.getSession() );
        List<String> pluginIds = pluginManager.getRegisteredPlugins();
        for ( String id : pluginIds ) {
          String mobileRedirect = (String)pluginManager.getPluginSetting( id, "mobile-redirect", null );
          if ( mobileRedirect != null ) {
            // we have a mobile redirect
            String queryString = request.getQueryString();
            if( queryString != null ) {
              final Map<String, String> queryPairs = new LinkedHashMap<String, String>();
              //Check for deep linking by fetching the name and startup-url values from URL query parameters
              String[] pairs = queryString.split( "&" );
              for ( String pair : pairs ) {
                int delimiter = pair.indexOf( "=" );
                queryPairs.put( Encode.forJavaScript( pair.substring( 0, delimiter ) ),  Encode.forJavaScript( pair.substring( delimiter + 1 ) ) );
              }
              if ( queryPairs.size() > 0 ) {
                mobileRedirect += "?";
                Iterator it = queryPairs.entrySet().iterator();
                while ( it.hasNext() ) {
                  Map.Entry entry = (Map.Entry) it.next();
                  mobileRedirect += entry.getKey() + "=" + entry.getValue();
                  it.remove();
                    if ( it.hasNext() ){
                      mobileRedirect += "&";
                    }
                }
              }
            }
  
      out.write("\n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("    if(typeof window.top.PentahoMobile != \"undefined\"){\n");
      out.write("      window.top.location.reload();\n");
      out.write("    } else {\n");
      out.write("      var tag = document.createElement('META');\n");
      out.write("      tag.setAttribute('HTTP-EQUIV', 'refresh');\n");
      out.write("      tag.setAttribute('CONTENT', '0;URL=");
      out.print(mobileRedirect);
      out.write("');\n");
      out.write("      document.getElementsByTagName('HEAD')[0].appendChild(tag);\n");
      out.write("    }\n");
      out.write("  </script>\n");
      out.write("</head>\n");
      out.write("<BODY>\n");
      out.write("<!-- this div is here for authentication detection (used by mobile, PIR, etc) -->\n");
      out.write("<div style=\"display:none\">j_spring_security_check</div>\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");

          return;
        }
      }
    }
  }

      out.write("\n");
      out.write("\n");
      out.write("<meta name=\"gwt:property\" content=\"locale=");
      out.print(Encode.forHtmlAttribute(request.getLocale().toString()));
      out.write("\">\n");
      out.write("<link rel=\"icon\" href=\"/pentaho-style/favicon.ico\"/>\n");
      out.write("<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/pentaho-style/apple-touch-icon.png\">\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/pentaho-style/favicon-32x32.png\">\n");
      out.write("<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/pentaho-style/favicon-16x16.png\">\n");
      out.write("<link rel=\"mask-icon\" href=\"/pentaho-style/safari-pinned-tab.svg\" color=\"#cc0000\">\n");
      out.write("\n");
      out.write("<script language=\"javascript\" type=\"text/javascript\" src=\"webcontext.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("  var targetUrl = window.location.pathname.replace(new RegExp(\"(/){2,}\"), \"/\");\n");
      out.write("  if (history && history.pushState){\n");
      out.write("    history.pushState(null, null, targetUrl);\n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body class=\"pentaho-page-background\">\n");
      out.write("<div id=\"login-wrapper\">\n");
      out.write("  <div id=\"login-header-wrapper\">\n");
      out.write("    <div id=\"login-header-logo\"></div>\n");
      out.write("    <div id=\"login-header-separator-box\">\n");
      out.write("      <div id=\"login-header-separator\"></div>\n");
      out.write("      <div id=\"login-header-separator-padding\"></div>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"login-header-app-name\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.HEADER.APPNAME"));
      out.write("</div>\n");
      out.write("  </div>\n");
      out.write("  <div id=\"login-background-main\">\n");
      out.write("    <div id=\"login-background-opacity\">\n");
      out.write("      <div id=\"login-background\">\n");
      out.write("\n");
      out.write("        <div id=\"login-title\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.WELCOME"));
      out.write("</div>\n");
      out.write("        <div id=\"login-messages\" class=\"none-login-message-visible\">\n");
      out.write("          <div id=\"loginError\" class=\"login-error-message\">\n");
      out.write("            <div class=\"login-error-icon\"></div>\n");
      out.write("            <div class=\"login-error-text\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.ERROR"));
      out.write("</div>\n");
      out.write("          </div>\n");
      out.write("          <div id=\"loginBlocked\" class=\"login-error-message\">\n");
      out.write("            <div class=\"login-error-icon\"></div>\n");
      out.write("            <div class=\"login-error-text\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.BLOCKED"));
      out.write("</div>\n");
      out.write("          </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        ");

          String cleanedLang = Encode.forHtmlAttribute(request.getLocale().toString());
          if ( cleanedLang != null ) {
            if ( cleanedLang.indexOf("_") > 0 ){
              cleanedLang = cleanedLang.substring( 0, cleanedLang.indexOf("_") );
            }
          }
        
      out.write("\n");
      out.write("        <div id=\"login-form-container\" class=\"lang_");
      out.print(cleanedLang);
      out.write("\">\n");
      out.write("          <div id=\"animate-wrapper\">\n");
      out.write("            <h1>");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.TITLE"));
      out.write("</h1>\n");
      out.write("            <form name=\"login\" id=\"login\" action=\"j_spring_security_check\" method=\"POST\">\n");
      out.write("              <div class=\"row-fluid nowrap\">\n");
      out.write("                <div class=\"space-10\"></div>\n");
      out.write("                <div class=\"input-container\">\n");
      out.write("                  <label>");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.USERNAME"));
      out.write("</label>\n");
      out.write("                  <input id=\"j_username\" name=\"j_username\" type=\"text\" placeholder=\"\" autocomplete=\"off\">\n");
      out.write("                </div>\n");
      out.write("                <div class=\"space-30\"></div>\n");
      out.write("                <div class=\"input-container\">\n");
      out.write("                  <label>");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.PASSWORD"));
      out.write("</label>\n");
      out.write("                  <input id=\"j_password\" name=\"j_password\" type=\"password\"\n");
      out.write("                         placeholder=\"\"\n");
      out.write("                         autocomplete=\"off\">\n");
      out.write("                </div>\n");
      out.write("                <div class=\"space-60\"></div>\n");
      out.write("                <div class=\"input-container\">\n");
      out.write("                  <button type=\"submit\" id=\"loginbtn\" class=\"btn\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.LOGIN"));
      out.write("</button>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"space-60\"></div>\n");
      out.write("              </div>\n");
      out.write("              <div class=\"space-60\"></div>\n");
      out.write("              <div id=\"eval-users-toggle-container\">\n");
      out.write("                ");

                  if (showUsers) {
                
      out.write("\n");
      out.write("                <div id=\"eval-users-toggle\" onClick=\"toggleEvalPanel()\">\n");
      out.write("                  <div>");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.EVAL_LOGIN"));
      out.write("</div>\n");
      out.write("                  <div id=\"eval-arrow\" class=\"closed\"></div>\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                ");

                } else {
                
      out.write("\n");
      out.write("                &nbsp;\n");
      out.write("                ");

                  }
                
      out.write("\n");
      out.write("              </div>\n");
      out.write("            </form>\n");
      out.write("          </div>\n");
      out.write("\n");
      out.write("          <div class=\"row-fluid\">\n");
      out.write("            <div id=\"evaluationPanel\" class=\"span10 row-fluid\">\n");
      out.write("              <div id=\"role-admin-panel\" class=\"span6 well\">\n");
      out.write("                <div class=\"login-role\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.ADMIN_USER"));
      out.write("</div>\n");
      out.write("                <div class=\"row-fluid\">\n");
      out.write("                  <div class=\"span6 login-label\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.USERNAME"));
      out.write("</div>\n");
      out.write("                  <div class=\"span6 login-value\">Admin</div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"row-fluid\">\n");
      out.write("                  <div class=\"span6 login-label\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.PASSWORD"));
      out.write("</div>\n");
      out.write("                  <div class=\"span6 login-value\">password</div>\n");
      out.write("                </div>\n");
      out.write("                <button class=\"btn\" onClick=\"loginAs('Admin', 'password');\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.LOGIN"));
      out.write("</button>\n");
      out.write("              </div>\n");
      out.write("              <div id=\"role-business-user-panel\" class=\"span6 well\">\n");
      out.write("                <div class=\"login-role\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.BUSINESS_USER"));
      out.write("</div>\n");
      out.write("                <div class=\"row-fluid\">\n");
      out.write("                  <div class=\"span6 login-label\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.USERNAME"));
      out.write("</div>\n");
      out.write("                  <div class=\"span6 login-value\">Suzy</div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"row-fluid\">\n");
      out.write("                  <div class=\"span6 login-label\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.PASSWORD"));
      out.write("</div>\n");
      out.write("                  <div class=\"span6 login-value\">password</div>\n");
      out.write("                </div>\n");
      out.write("                <button class=\"btn\" onClick=\"loginAs('Suzy', 'password');\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.LOGIN"));
      out.write("</button>\n");
      out.write("              </div>\n");
      out.write("            </div>\n");
      out.write("          </div>\n");
      out.write("\n");
      out.write("          <div class=\"space-30\"></div>\n");
      out.write("\n");
      out.write("        </div>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("  <div id=\"login-footer-wrapper\">\n");
      out.write("    <div id=\"login-footer-company\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.FOOTER.COMPANY"));
      out.write("</div>\n");
      out.write("    <div id=\"login-footer-copyright\">");
      out.print(Messages.getInstance().getString("UI.PUC.LOGIN.COPYRIGHT", String.valueOf(year)));
      out.write("</div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("  ");

  if (showUsers) {
  
      out.write("\n");
      out.write("\n");
      out.write("  function toggleEvalPanel() {\n");
      out.write("    var evaluationPanel = $(\"#evaluationPanel\");\n");
      out.write("    evaluationPanel.toggleClass(\"afterSlide\");\n");
      out.write("    $(\"#eval-arrow\").toggleClass(\"closed\");\n");
      out.write("  }\n");
      out.write("  ");

  }
  
      out.write("\n");
      out.write("\n");
      out.write("  function bounceToReturnLocation() {\n");
      out.write("    var returnLocation = '");
      out.print(Encode.forJavaScript(requestedURL));
      out.write("';\n");
      out.write("\n");
      out.write("    if (returnLocation != '' && returnLocation != null) {\n");
      out.write("      window.location.href = returnLocation;\n");
      out.write("    } else {\n");
      out.write("      window.location.href = window.location.href.replace(\"Login\", \"Home\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function doLogin() {\n");
      out.write("\n");
      out.write("    // if we have a valid session and we attempt to login on top of it, the server\n");
      out.write("    // will actually log us out and will not log in with the supplied credentials, you must\n");
      out.write("    // login again. So instead, if they're already logged in, we bounce out of here to\n");
      out.write("    // prevent confusion.\n");
      out.write("    if (");
      out.print(loggedIn);
      out.write(") {\n");
      out.write("      bounceToReturnLocation();\n");
      out.write("      return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    ");
 if (isUserBlocked(session)) { 
      out.write("\n");
      out.write("    var userState = 'j_spring_security_user_blocked';\n");
      out.write("    ");
 }
    else { 
      out.write("\n");
      out.write("    var userState = '';\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    jQuery.ajax({\n");
      out.write("      type: \"POST\",\n");
      out.write("      url: \"j_spring_security_check\",\n");
      out.write("      dataType: \"text\",\n");
      out.write("      data: $(\"#login\").serialize(),\n");
      out.write("\n");
      out.write("      error:function (xhr, ajaxOptions, thrownError){\n");
      out.write("        if (xhr.status == 404) {\n");
      out.write("          // if we get a 404 it means login was successful but intended resource does not exist\n");
      out.write("          // just let it go - let the user get the 404\n");
      out.write("          bounceToReturnLocation();\n");
      out.write("          return;\n");
      out.write("        }\n");
      out.write("        //Fix for BISERVER-7525\n");
      out.write("        //parsereerror caused by attempting to serve a complex document like a prd report in any presentation format like a .ppt\n");
      out.write("        //does not necesarly mean that there was a failure in the login process, status is 200 so just let it serve the archive to the web browser.\n");
      out.write("        if (xhr.status == 200 && thrownError == 'parsererror') {\n");
      out.write("          document.getElementById(\"j_password\").value = \"\";\n");
      out.write("          bounceToReturnLocation();\n");
      out.write("          return;\n");
      out.write("        }\n");
      out.write("        // fail\n");
      out.write("        showOneErrorMessage('loginError');\n");
      out.write("      },\n");
      out.write("\n");
      out.write("      success:function(data, textStatus, jqXHR){\n");
      out.write("        if (data.indexOf(\"j_spring_security_check\") != -1) {\n");
      out.write("          // fail\n");
      out.write("          if( userState === 'j_spring_security_user_blocked' || data.match(/j_spring_security_user_blocked/g).length > 2 ){\n");
      out.write("            showOneErrorMessage('loginBlocked');\n");
      out.write("          }\n");
      out.write("          else {\n");
      out.write("            showOneErrorMessage('loginError');\n");
      out.write("          }\n");
      out.write("          return false;\n");
      out.write("        } else {\n");
      out.write("          document.getElementById(\"j_password\").value = \"\";\n");
      out.write("          bounceToReturnLocation();\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("    return false;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function showOneErrorMessage(divId) {\n");
      out.write("    var msgs = document.getElementsByClassName('login-error-message');\n");
      out.write("    var isSomeMessageVisible = false;\n");
      out.write("    if(msgs && msgs.length > 0) {\n");
      out.write("      for (var i = 0; i < msgs.length; i++) {\n");
      out.write("        if(msgs[i].id === divId) {\n");
      out.write("          msgs[i].style.display='inline-flex';\n");
      out.write("          isSomeMessageVisible = true;\n");
      out.write("        } else {\n");
      out.write("          msgs[i].style.display='none';\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    if(isSomeMessageVisible){\n");
      out.write("      document.getElementById('login-messages').className='some-login-message-visible';\n");
      out.write("    } else {\n");
      out.write("      document.getElementById('login-messages').className='none-login-message-visible';\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function loginAs (username, password) {\n");
      out.write("    $(\"#j_username\").prop(\"value\", username);\n");
      out.write("    $(\"#j_password\").prop(\"value\", password);\n");
      out.write("    doLogin();\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  $(document).ready(function(){\n");
      out.write("    $(\"#login\").submit(doLogin);\n");
      out.write("\n");
      out.write("    if (");
      out.print(loggedIn);
      out.write(") {\n");
      out.write("      bounceToReturnLocation();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    $(\"#login-background\").fadeIn(1000, function() {\n");
      out.write("      $(\"#animate-wrapper\").addClass(\"afterSlide\");\n");
      out.write("      $(\"#j_username\").focus();\n");
      out.write("    });\n");
      out.write("\n");
      out.write("\n");
      out.write("  });\n");
      out.write("</script>\n");
      out.write("</body>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
