/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2025-06-16 18:17:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mantle.browser;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.pentaho.platform.engine.core.system.PentahoSessionHolder;
import org.pentaho.platform.util.messages.LocaleHelper;
import org.owasp.encoder.Encode;
import java.util.Locale;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("org.pentaho.platform.util.messages.LocaleHelper");
    _jspx_imports_classes.add("org.pentaho.platform.engine.core.system.PentahoSessionHolder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  String userName = PentahoSessionHolder.getSession().getName();
  Locale locale = LocaleHelper.getLocale();

      out.write("\n");
      out.write("<html lang=\"en\" class=\"bootstrap\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\" class=\"bootstrap\">\n");
      out.write("<title>Browse Files</title>\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("<meta name=\"locale\" content=\"");
      out.print(Encode.forHtmlAttribute(locale.toString()));
      out.write("\">\n");
      out.write("\n");
      out.write("<!-- Le styles -->\n");
      out.write("<link href=\"css/browser.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<!-- We need web context for requirejs and css -->\n");
      out.write("<script type=\"text/javascript\" src=\"webcontext.js?context=mantle&cssOnly=true\"></script>\n");
      out.write("\n");
      out.write("<!-- Avoid 'console' errors in browsers that lack a console. -->\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("  if (!(window.console && console.log)) {\n");
      out.write("    (function () {\n");
      out.write("      var noop = function () {\n");
      out.write("      };\n");
      out.write("      var methods = ['assert', 'debug', 'error', 'info', 'log', 'trace', 'warn'];\n");
      out.write("      var length = methods.length;\n");
      out.write("      var console = window.console = {};\n");
      out.write("      while (length--) {\n");
      out.write("        console[methods[length]] = noop;\n");
      out.write("      }\n");
      out.write("    }());\n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<!-- libs -->\n");
      out.write("<script type=\"text/javascript\" src=\"lib/jquery/jquery-3.5.1.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"lib/underscore/underscore-min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"lib/backbone/backbone.js\"></script>\n");
      out.write("\n");
      out.write("<!-- Require File Browser -->\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("  function openRepositoryFile(path, mode) {\n");
      out.write("    if (!path) {\n");
      out.write("      return;\n");
      out.write("    }\n");
      out.write("    if (!mode) {\n");
      out.write("      mode = \"edit\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // show the opened perspective\n");
      out.write("    var extension = path.split(\".\").pop();\n");
      out.write("    var hasPlugin = window.parent.PluginOptionHelper_hasPlugin(path);\n");
      out.write("    if (window.parent.mantle_isSupportedExtension(extension) && !hasPlugin) {\n");
      out.write("        var filename = path.split('\\\\').pop().split('/').pop();\n");
      out.write("        window.parent.mantle_showPluginError(filename);\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("    // force to open pdf files in another window due to issues with pdf readers in IE browsers\n");
      out.write("    // via class added on themeResources for IE browsers\n");
      out.write("    if (!($(\"body\").hasClass(\"pdfReaderEmbeded\") && extension == \"pdf\")) {\n");
      out.write("      parent.mantle_setPerspective('opened.perspective');\n");
      out.write("    }\n");
      out.write("    window.parent.mantle_openRepositoryFile(path, mode);\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  var FileBrowser = null;\n");
      out.write("\n");
      out.write("  function initBrowser(canDownload, showHiddenFiles, showDescriptions, canPublish, canRead, canCreate) {\n");
      out.write("    require([\"mantle/browser/browser\", \"pentaho/csrf/service\"], function (pentahoFileBrowser, csrfService) {\n");
      out.write("      FileBrowser = pentahoFileBrowser;\n");
      out.write("      FileBrowser.setOpenFileHandler(openRepositoryFile);\n");
      out.write("      FileBrowser.setContainer($(\"#fileBrowser\"));\n");
      out.write("      FileBrowser.setShowHiddenFiles(showHiddenFiles);\n");
      out.write("      FileBrowser.setShowDescriptions(showDescriptions);\n");
      out.write("      FileBrowser.setCanDownload(canDownload);\n");
      out.write("      FileBrowser.setCanPublish(canPublish);\n");
      out.write("      FileBrowser.setCanRead(canRead);\n");
      out.write("      FileBrowser.setCanCreate(canCreate);\n");
      out.write("      \n");
      out.write("      var open_dir = window.parent.HOME_FOLDER;\n");
      out.write("      var initialFolderResourceUrl = CONTEXT_PATH + \"api/mantle/session-variable?key=scheduler_folder\";\n");
      out.write("\n");
      out.write("      $.ajax({\n");
      out.write("				url: initialFolderResourceUrl,\n");
      out.write("				type: \"GET\",\n");
      out.write("				cache: false,\n");
      out.write("				async: true,\n");
      out.write("				success: function (response) {\n");
      out.write("					if(response != null && response.length > 0) {\n");
      out.write("\n");
      out.write("						open_dir = decodeURIComponent(response);\n");
      out.write("\n");
      out.write("						var headers = {};\n");
      out.write("                        var csrfToken = csrfService.getToken(initialFolderResourceUrl);\n");
      out.write("                        if(csrfToken !== null) {\n");
      out.write("                          headers[csrfToken.header] = csrfToken.token;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("						$.ajax({\n");
      out.write("							url: initialFolderResourceUrl,\n");
      out.write("							type: \"DELETE\",\n");
      out.write("							cache: false,\n");
      out.write("							async: true,\n");
      out.write("                            headers: headers,\n");
      out.write("							success: function (response) {\n");
      out.write("							}\n");
      out.write("						});\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					FileBrowser.update(open_dir);\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("      \n");
      out.write("      if (window.parent.mantle_addHandler == undefined) return;\n");
      out.write("\n");
      out.write("      window.parent.mantle_addHandler(\"ShowHiddenFilesEvent\", function (event) {\n");
      out.write("        if (event.value != undefined) {\n");
      out.write("          //Clear the Browse Perspective cache\n");
      out.write("          window.parent.mantle_isBrowseRepoDirty = true;\n");
      out.write("          FileBrowser.setShowHiddenFiles(event.value);\n");
      out.write("          FileBrowser.update(window.parent.HOME_FOLDER);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      window.parent.mantle_addHandler(\"ShowDescriptionsEvent\", function (event) {\n");
      out.write("        if (event.value != undefined) {\n");
      out.write("          FileBrowser.updateShowDescriptions(event.value);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("\n");
      out.write("      // refresh file list on successful delete\n");
      out.write("      window.parent.mantle_addHandler(\"SolutionFileActionEvent\", function (event) {\n");
      out.write("        if (event.action.indexOf('DeleteFileCommand') >= 0 ||\n");
      out.write("            (event.action.indexOf('RestoreFileCommand') >= 0) ||\n");
      out.write("            (event.action.indexOf('DeletePermanentFileCommand') >= 0)) {\n");
      out.write("          if (event.message == 'Success') {\n");
      out.write("            window.parent.mantle_isBrowseRepoDirty = true;\n");
      out.write("            refreshFileBrowser(event);\n");
      out.write("          }\n");
      out.write("          else {\n");
      out.write("            window.parent.mantle_showMessage('Error', event.message);\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("        else if ((event.action.indexOf('ScheduleHelper') >= 0) ||\n");
      out.write("                (event.action.indexOf('ShareFileCommand') >= 0)) {\n");
      out.write("            if (event.message == 'Open' || event.message == 'Success') {\n");
      out.write("                window.parent.mantle_setPerspective('browser.perspective'); // change to browse perspective\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else if (event.action.indexOf('CutFilesCommand') >= 0 ||\n");
      out.write("                event.action.indexOf('CopyFilesCommand') >= 0) {\n");
      out.write("\n");
      out.write("            var model = FileBrowser.fileBrowserModel;\n");
      out.write("            var browserUtils = model.get('browserUtils');\n");
      out.write("            var fileListModel = model.get('fileListModel');\n");
      out.write("            var multiSelectItems = cutItems = FileBrowser.concatArray(fileListModel.get(\"multiSelect\"), fileListModel.get(\"shiftLasso\"));\n");
      out.write("\n");
      out.write("            switch (event.message) {\n");
      out.write("                case 'Click':\n");
      out.write("                    switch (event.action) {\n");
      out.write("                        case \"org.pentaho.mantle.client.commands.CutFilesCommand\":\n");
      out.write("                            browserUtils.trackItems(cutItems, multiSelectItems);\n");
      out.write("                            browserUtils.uiButtonFeedback([$(\"#cutButton\"), $(\"#cutbutton\")], [$(\"#copyButton\")]);\n");
      out.write("                            break;\n");
      out.write("                        case \"org.pentaho.mantle.client.commands.CopyFilesCommand\":\n");
      out.write("                            browserUtils.trackItems(new Array(), multiSelectItems);\n");
      out.write("                            browserUtils.uiButtonFeedback([$(\"#copyButton\")], [$(\"#cutButton\"), $(\"#cutbutton\")]);\n");
      out.write("                            break;\n");
      out.write("                    }\n");
      out.write("                    break;\n");
      out.write("                case 'Success':\n");
      out.write("                    switch (event.action) {\n");
      out.write("                        case \"org.pentaho.mantle.client.commands.CutFilesCommand\":\n");
      out.write("                            break;\n");
      out.write("                        case \"org.pentaho.mantle.client.commands.CopyFilesCommand\":\n");
      out.write("                            break;\n");
      out.write("                    }\n");
      out.write("                    break;\n");
      out.write("                default:\n");
      out.write("                    switch (event.action) {\n");
      out.write("                        case \"org.pentaho.mantle.client.commands.PasteFilesCommand\":\n");
      out.write("                            //Handle errors\n");
      out.write("                            break;\n");
      out.write("                    }\n");
      out.write("                    break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      window.parent.mantle_addHandler(\"SolutionFolderActionEvent\", function (event) {\n");
      out.write("          // refresh folder list on create new folder / delete folder / import\n");
      out.write("          if (event.action.indexOf('NewFolderCommand') >= 0 ||\n");
      out.write("                  event.action.indexOf('DeleteFolderCommand') >= 0 ||\n");
      out.write("                  event.action.indexOf('ImportFileCommand') >= 0 ||\n");
      out.write("                  event.action.indexOf('DeleteFolderCommand') >= 0) {\n");
      out.write("              if (event.message == 'Success') {\n");
      out.write("                  refreshFileBrowser(event);\n");
      out.write("              }\n");
      out.write("              else {\n");
      out.write("                  window.parent.mantle_showMessage('Error', event.message);\n");
      out.write("              }\n");
      out.write("          }\n");
      out.write("          else if (event.action.indexOf('PasteFilesCommand') >= 0) {\n");
      out.write("              var model = FileBrowser.fileBrowserModel;\n");
      out.write("              var browserUtils = model.get('browserUtils');\n");
      out.write("              var fileListModel = model.get('fileListModel');\n");
      out.write("\n");
      out.write("              switch (event.message) {\n");
      out.write("                  case 'Success':\n");
      out.write("                      switch (event.action) {\n");
      out.write("                          case \"org.pentaho.mantle.client.commands.PasteFilesCommand\":\n");
      out.write("                              refreshFileBrowser(event);\n");
      out.write("                              break;\n");
      out.write("                      }\n");
      out.write("                      break;\n");
      out.write("                  case 'Click':\n");
      out.write("                      switch (event.action) {\n");
      out.write("                          case \"org.pentaho.mantle.client.commands.PasteFilesCommand\":\n");
      out.write("                              browserUtils.uiSpinnerFeedback([], [fileListModel]);\n");
      out.write("                              break;\n");
      out.write("                      }\n");
      out.write("                      break;\n");
      out.write("                  case 'Cancel':\n");
      out.write("                      switch (event.action) {\n");
      out.write("                          case \"org.pentaho.mantle.client.commands.PasteFilesCommand\":\n");
      out.write("                              browserUtils.uiSpinnerFeedback([fileListModel], []);\n");
      out.write("                              break;\n");
      out.write("                      }\n");
      out.write("                      break;\n");
      out.write("                  default:\n");
      out.write("                      switch (event.action) {\n");
      out.write("                          case \"org.pentaho.mantle.client.commands.PasteFilesCommand\":\n");
      out.write("                              //Handle errors\n");
      out.write("                              window.parent.mantle_showMessage('Error', event.message);\n");
      out.write("                              browserUtils.uiSpinnerFeedback([fileListModel], []);\n");
      out.write("                              break;\n");
      out.write("                      }\n");
      out.write("                      break;\n");
      out.write("              }\n");
      out.write("          }\n");
      out.write("      });\n");
      out.write("\n");
      out.write("      window.parent.mantle_addHandler(\"GenericEvent\", function (paramJson) {\n");
      out.write("        if (paramJson.eventSubType == \"OpenFolderEvent\") {\n");
      out.write("          FileBrowser.openFolder(paramJson.stringParam);\n");
      out.write("        }\n");
      out.write("        else if (paramJson.eventSubType == \"RefreshBrowsePerspectiveEvent\") {\n");
      out.write("          //Clear the Browse Perspective cache\n");
      out.write("          window.parent.mantle_isBrowseRepoDirty = true;\n");
      out.write("          FileBrowser.update(window.parent.HOME_FOLDER, paramJson.booleanParam); // refresh folder list\n");
      out.write("        }\n");
      out.write("        else if (paramJson.eventSubType == \"RefreshFolderEvent\") {\n");
      out.write("          FileBrowser.updateFolder(paramJson.stringParam); // refresh specified folder\n");
      out.write("        }\n");
      out.write("        else if (paramJson.eventSubType == \"RefreshCurrentFolderEvent\") {\n");
      out.write("          FileBrowser.updateData();\n");
      out.write("        }\n");
      out.write("        else if (paramJson.eventSubType == \"ImportDialogEvent\") {\n");
      out.write("          FileBrowser.update(FileBrowser.fileBrowserModel.getFolderClicked().attr(\"path\")); // refresh folder list\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function refreshFileBrowser(event) {\n");
      out.write("    if (FileBrowser.fileBrowserModel.getFolderClicked()) {\n");
      out.write("\n");
      out.write("        //Refresh folders to parent path if deleting a folder\n");
      out.write("        if ((event.action.indexOf('DeleteFolderCommand') >= 0)) {\n");
      out.write("            var path = FileBrowser.fileBrowserModel.getFolderClicked().attr(\"path\");\n");
      out.write("            var parentPath = path.substring(0, path.lastIndexOf(\"/\"));\n");
      out.write("            FileBrowser.update(parentPath); // refresh folder list\n");
      out.write("        }\n");
      out.write("        //Restore to last clicked folder path for all other actions\n");
      out.write("        else {\n");
      out.write("            FileBrowser.update(FileBrowser.fileBrowserModel.getFolderClicked().attr(\"path\")); // refresh folder list\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    //If no last clicked folder, restore to home folder\n");
      out.write("    else {\n");
      out.write("        FileBrowser.update(window.parent.HOME_FOLDER);\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  // With the fix BACKLOG-23730, server-side and client-side code uses centralized logic to check if user\n");
      out.write("  // can download/upload content\n");
      out.write("  function checkDownload() {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/repo/files/canDownload\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response) {\n");
      out.write("        checkShowHiddenFiles(response == \"true\");\n");
      out.write("      },\n");
      out.write("      error: function (response) {\n");
      out.write("        checkShowHiddenFiles(false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function checkShowHiddenFiles(canDownload) {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/user-settings/MANTLE_SHOW_HIDDEN_FILES\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response, status, xhr) {\n");
      out.write("        checkShowDescriptions(canDownload, xhr.status == 200 && response);\n");
      out.write("      },\n");
      out.write("      error: function () {\n");
      out.write("        checkShowDescriptions(canDownload, false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function checkShowDescriptions(canDownload, showHiddenFiles) {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/user-settings/MANTLE_SHOW_DESCRIPTIONS_FOR_TOOLTIPS\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response, status, xhr) {\n");
      out.write("        checkPublish(canDownload, showHiddenFiles, xhr.status == 200 && response);\n");
      out.write("      },\n");
      out.write("      error: function () {\n");
      out.write("        checkPublish(canDownload, showHiddenFiles, false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  // With the fix BACKLOG-23730, server-side and client-side code uses centralized logic to check if user\n");
      out.write("  // can download/upload content\n");
      out.write("  function checkPublish(canDownload, showHiddenFiles, showDescriptions) {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/repo/files/canUpload\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response) {\n");
      out.write("        checkCanRead(canDownload, showHiddenFiles, showDescriptions, (response == \"true\"));\n");
      out.write("      },\n");
      out.write("      error: function (response) {\n");
      out.write("        checkCanRead(canDownload, showHiddenFiles, showDescriptions, false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function checkCanRead(canDownload, showHiddenFiles, showDescriptions, canPublish) {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/authorization/action/isauthorized?authAction=org.pentaho.repository.read\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response) {\n");
      out.write("        checkCanCreate(canDownload, showHiddenFiles, showDescriptions, canPublish, (response == \"true\") );\n");
      out.write("      },\n");
      out.write("      error: function (response) {\n");
      out.write("        checkCanCreate(canDownload, showHiddenFiles, showDescriptions, canPublish, false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  function checkCanCreate(canDownload, showHiddenFiles, showDescriptions, canPublish, canRead) {\n");
      out.write("    $.ajax({\n");
      out.write("      url: CONTEXT_PATH + \"api/authorization/action/isauthorized?authAction=org.pentaho.repository.create\",\n");
      out.write("      type: \"GET\",\n");
      out.write("      async: true,\n");
      out.write("      success: function (response) {\n");
      out.write("        initBrowser(canDownload, showHiddenFiles, showDescriptions, canPublish, canRead, (response == \"true\") );\n");
      out.write("      },\n");
      out.write("      error: function (response) {\n");
      out.write("        initBrowser(canDownload, showHiddenFiles, showDescriptions, canPublish, canRead, false);\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  //init component\n");
      out.write("  checkDownload();\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body data-spy=\"scroll\" data-target=\".sidebar\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"container-fluid main-container fill-absolute\">\n");
      out.write("  <div id=\"fileBrowser\" class=\"row-fluid fill-absolute\">\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
